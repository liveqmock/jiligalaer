package sy.controller.product;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.lang.StringUtils;
import org.junit.internal.ExactComparisonCriteria;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;

import sy.common.model.ECContext;
import sy.common.model.QueryContext;
import sy.common.util.Constants;
import sy.common.util.DateUtil;
import sy.common.util.cloudstack.CloudException;
import sy.common.util.cloudstack.entity.NetworkType;
import sy.common.util.validator.ValidatorException;
import sy.controller.shared.BaseController;
import sy.domain.vo.base.BasicUserVo;
import sy.domain.vo.expense.AccountExpenseVo;
import sy.domain.vo.product.CloudMdmNetworkVo;
import sy.domain.vo.product.CloudMdmProductItemVo;
import sy.domain.vo.product.CloudMdmProductVo;
import sy.domain.vo.product.CloudMdmVmVo;
import sy.domain.vo.product.CloudOrderApprovalVo;
import sy.domain.vo.product.CloudProductDetail;
import sy.domain.vo.product.CloudProductPriceVo;
import sy.domain.vo.product.CloudProductQuickBuyVo;
import sy.domain.vo.product.CloudSecurityGroupVo;
import sy.domain.vo.product.CloudUserOrderItemVo;
import sy.domain.vo.product.CloudUserOrderVo;
import sy.domain.vo.product.CloudVmBuyDetailVo;
import sy.domain.vo.product.CloudVmCellDetailVo;
import sy.domain.vo.promotion.CloudPromotionValue;
import sy.service.base.BasicUserServiceI;
import sy.service.expense.AccountExpenseServiceI;
import sy.service.product.CloudMdmCPUSolnServiceI;
import sy.service.product.CloudMdmDiskSolnServiceI;
import sy.service.product.CloudMdmIPServiceI;
import sy.service.product.CloudMdmNetworkServiceI;
import sy.service.product.CloudMdmNetworkSolnServiceI;
import sy.service.product.CloudMdmProductItemServiceI;
import sy.service.product.CloudMdmProductServiceI;
import sy.service.product.CloudMdmTemplateServiceI;
import sy.service.product.CloudMdmVMServiceI;
import sy.service.product.CloudMdmZoneServiceI;
import sy.service.product.CloudOrderAppprovalServiceI;
import sy.service.product.CloudProductPriceServiceI;
import sy.service.product.CloudSecurityGroupServiceI;
import sy.service.product.CloudUserOrderServiceI;
import sy.service.promotion.CloudPromotionProductServiceI;

/**
 * 产品购买-快速购买
 * 
 * @author luobin
 * 
 */
@Controller
@RequestMapping("/quickBuy")
@SuppressWarnings("unused")
public class ProductQuickBuyController extends BaseController {

	@Autowired
	private CloudMdmCPUSolnServiceI cloudMdmCPUSolnService;
	@Autowired
	private CloudMdmDiskSolnServiceI cloudMdmDiskSolnService;
	@Autowired
	private CloudMdmNetworkSolnServiceI cloudMdmNetworkSolnService;
	@Autowired
	private CloudMdmTemplateServiceI cloudMdmTemplateService;
	@Autowired
	private CloudMdmIPServiceI cloudMdmIPService;

	@Autowired
	private CloudMdmVMServiceI cloudMdmVMService;
	@Autowired
	private CloudMdmZoneServiceI cloudMdmZoneService;

	// 产品管理
	@Autowired
	private CloudMdmProductServiceI cloudMdmProductService;
	@Autowired
	private CloudMdmProductItemServiceI cloudMdmProductItemService;
	@Autowired
	private CloudProductPriceServiceI cloudProductPriceService;
	@Autowired
	private BasicUserServiceI basicUserService;
	@Autowired
	private CloudMdmNetworkServiceI cloudMdmNetworkService;
	@Autowired
	private CloudSecurityGroupServiceI cloudSecurityGroupService;
	@Autowired
	private CloudUserOrderServiceI cloudUserOrderService;
	@Autowired
	private AccountExpenseServiceI accountExpenseService;
	@Autowired
	private CloudPromotionProductServiceI cloudPromotionProductService;
	@Autowired
	private CloudOrderAppprovalServiceI cloudOrderAppprovalService;

	public void setCloudPromotionProductService(
			CloudPromotionProductServiceI cloudPromotionProductService) {
		this.cloudPromotionProductService = cloudPromotionProductService;
	}

	public void setAccountExpenseService(
			AccountExpenseServiceI accountExpenseService) {
		this.accountExpenseService = accountExpenseService;
	}

	public void setCloudSecurityGroupService(
			CloudSecurityGroupServiceI cloudSecurityGroupService) {
		this.cloudSecurityGroupService = cloudSecurityGroupService;
	}

	public void setCloudMdmNetworkService(
			CloudMdmNetworkServiceI cloudMdmNetworkService) {
		this.cloudMdmNetworkService = cloudMdmNetworkService;
	}

	public void setBasicUserService(BasicUserServiceI basicUserService) {
		this.basicUserService = basicUserService;
	}

	public void setCloudMdmCPUSolnService(
			CloudMdmCPUSolnServiceI cloudMdmCPUSolnService) {
		this.cloudMdmCPUSolnService = cloudMdmCPUSolnService;
	}

	public void setCloudMdmDiskSolnService(
			CloudMdmDiskSolnServiceI cloudMdmDiskSolnService) {
		this.cloudMdmDiskSolnService = cloudMdmDiskSolnService;
	}

	public void setCloudMdmNetworkSolnService(
			CloudMdmNetworkSolnServiceI cloudMdmNetworkSolnService) {
		this.cloudMdmNetworkSolnService = cloudMdmNetworkSolnService;
	}

	public void setCloudMdmTemplateService(
			CloudMdmTemplateServiceI cloudMdmTemplateService) {
		this.cloudMdmTemplateService = cloudMdmTemplateService;
	}

	public void setCloudMdmIPService(CloudMdmIPServiceI cloudMdmIPService) {
		this.cloudMdmIPService = cloudMdmIPService;
	}

	public void setCloudMdmVMService(CloudMdmVMServiceI cloudMdmVMService) {
		this.cloudMdmVMService = cloudMdmVMService;
	}

	public void setCloudMdmZoneService(CloudMdmZoneServiceI cloudMdmZoneService) {
		this.cloudMdmZoneService = cloudMdmZoneService;
	}

	public void setCloudMdmProductService(
			CloudMdmProductServiceI cloudMdmProductService) {
		this.cloudMdmProductService = cloudMdmProductService;
	}

	public void setCloudMdmProductItemService(
			CloudMdmProductItemServiceI cloudMdmProductItemService) {
		this.cloudMdmProductItemService = cloudMdmProductItemService;
	}

	public void setCloudProductPriceService(
			CloudProductPriceServiceI cloudProductPriceService) {
		this.cloudProductPriceService = cloudProductPriceService;
	}

	public void setCloudOrderAppprovalService(
			CloudOrderAppprovalServiceI cloudOrderAppprovalService) {
		this.cloudOrderAppprovalService = cloudOrderAppprovalService;
	}

	/**
	 * 产品购买-快速购买-选择虚拟机
	 * 
	 * @param request
	 * @param response
	 * @param vo
	 * @param modelMap
	 * @return
	 * @throws ValidatorException
	 */
	@RequestMapping(value = "selectVm")
	public String selectVm(HttpServletRequest request,
			HttpServletResponse response, CloudMdmProductItemVo vo,
			ModelMap modelMap) throws ValidatorException {
		QueryContext context = new ECContext(request, modelMap, "order");
		context.clearParmeters();
		context.put("$eq_itemType", Constants.PROD_TYPE_COMP_PROD);
		context.setPaging(false);
		// 接口读取已存在的配置方案
		int comnSize = 0;
		List<CloudProductPriceVo> cloudProductPriceVoList = null;
		try {
			cloudProductPriceVoList = cloudProductPriceService
					.getCloudProductPriceVoByComb();
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		if (null != cloudProductPriceVoList) {
			comnSize = cloudProductPriceVoList.size();
		}
		String product_quickCombProdId = (String) request.getSession()
				.getAttribute("product_quickCombProdId");
		String product_quickCombnetType = (String) request.getSession()
				.getAttribute("product_quickCombnetType");
		String product_quickCombZoneId = (String) request.getSession()
				.getAttribute("product_quickCombZoneId");
		modelMap.put("prodId", product_quickCombProdId + "__"
				+ product_quickCombZoneId + "__" + product_quickCombnetType);
		modelMap.put("combProdItemSize", comnSize);
		modelMap.put("cloudProductPriceVoList", cloudProductPriceVoList);
		// 跳转到选择虚拟机页面
		return "product/productQuickBuy_selectVm";
	}

	/**
	 * 产品购买-快速购买-选择网络
	 * 
	 * @param request
	 * @param response
	 * @param vo
	 * @param modelMap
	 * @return
	 */
	@RequestMapping(value = "selectNet")
	public String selectNet(HttpServletRequest request,
			HttpServletResponse response, CloudUserOrderVo vo, ModelMap modelMap) {
		BasicUserVo user = (BasicUserVo) request.getSession().getAttribute(
				Constants.SESSION_USER_KEY);
		if (null != user) {
			if (user.getUserFlag() == Constants.USER_FLAG_USER) {
				modelMap.put("userFlag","0");
				try {
					user = basicUserService.get(user.getParentBasicUser()
							.getUserId());
				} catch (ValidatorException e) {
					// TODO Auto-generated catch block
					logger.equals("can't get BasicAccount.");
				}
			}else{
				modelMap.put("userFlag","1");
			}
		}
		String prodId = request.getParameter("prodId");
		if (StringUtils.isNotBlank(prodId)) {
			String[] prodInfo = prodId.split("__");
			request.getSession().setAttribute("product_quickCombProdId",
					prodInfo[0]);
			request.getSession().setAttribute("product_quickCombZoneId",
					prodInfo[1]);
			request.getSession().setAttribute("product_quickCombnetType",
					prodInfo[2]);
		}
		String product_quickCombNetIds = (String) request.getSession()
				.getAttribute("product_quickCombNetIds");
		String product_quickCombZoneId = (String) request.getSession()
				.getAttribute("product_quickCombZoneId");
		String product_quickCombnetType = (String) request.getSession()
				.getAttribute("product_quickCombnetType");
		if (null != user) {
			if (StringUtils.isNotBlank(product_quickCombnetType)
					&& product_quickCombnetType.equals(NetworkType.Advanced
							.toString())) {
				try {

					List<CloudMdmNetworkVo> cloudMdmNetworkList = cloudMdmNetworkService
							.getUserNetWorksByZoneAccount(
									user.getUserAccount(), cloudMdmZoneService
											.get(product_quickCombZoneId)
											.getInterfaceId());
					modelMap.put("netId", product_quickCombNetIds);
					modelMap.put("cloudMdmNetworkList", cloudMdmNetworkList);
				} catch (Exception e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				return "product/productQuickBuy_selectAdvanceNet";
			} else if (StringUtils.isNotBlank(product_quickCombnetType)
					&& product_quickCombnetType.equals(NetworkType.Basic
							.toString()) && null != user) {
				try {
					String secGroupIds = (String) request.getSession()
							.getAttribute("product_quicksetGroupIds");
					List<CloudSecurityGroupVo> CloudSecurityGroupList = cloudSecurityGroupService
							.getSecurityGroupListByAccount(user
									.getUserAccount());
					CloudMdmNetworkVo cloudMdmNetworkVo = cloudMdmNetworkService
							.getBasicNetByZone(product_quickCombZoneId);
					modelMap.put("secGroupId", secGroupIds);
					modelMap.put("CloudSecurityGroupList",
							CloudSecurityGroupList);
				} catch (Exception e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
					modelMap.put("message", "获取网络时失败!");
					return "product/productQuickBuy_selectVm";

				}
				return "product/productQuickBuy_selectBasicNet";
			}
		}
		return null;
	}

	/**
	 * 产品购买-快速购买-主机配置
	 * 
	 * @param request
	 * @param response
	 * @param vo
	 * @param modelMap
	 * @return
	 */
	@RequestMapping(value = "hostConfig")
	public String hostConfig(HttpServletRequest request,
			HttpServletResponse response, CloudVmBuyDetailVo vo,
			ModelMap modelMap) {
		String product_quickCombnetType = (String) request.getSession()
				.getAttribute("product_quickCombnetType");

		vo.setCount((Integer) request.getSession().getAttribute(
				"productQuickBuy_countNum"));
		vo.setVmName((String) request.getSession().getAttribute(
				"productQuickBuy_vmName"));
		vo.setStopTime((String) request.getSession().getAttribute(
				"productQuickBuy_stopTime"));
		if (StringUtils.isNotBlank(product_quickCombnetType)
				&& product_quickCombnetType
						.equals(NetworkType.Basic.toString())) {
			String setGroupId = request.getParameter("secGroupId");
			if (StringUtils.isNotBlank(setGroupId)) {
				request.getSession().setAttribute("product_quicksetGroupIds",
						setGroupId);
			}

			return "product/productQuickBuy_basicHostConfig";
		} else if (StringUtils.isNotBlank(product_quickCombnetType)
				&& product_quickCombnetType.equals(NetworkType.Advanced
						.toString())) {
			String advanceNetId = request.getParameter("networkId");
			if (StringUtils.isNotBlank(advanceNetId)) {
				request.getSession().setAttribute("product_quickCombNetIds",
						advanceNetId);
			}
			return "product/productQuickBuy_advanceHostConfig";
		}
		return null;
	}

	/**
	 * 产品购买-快速购买-选择计费
	 * 
	 * @param request
	 * @param response
	 * @param vo
	 * @param modelMap
	 * @return
	 */
	@RequestMapping(value = "selectBilling")
	public String selectBilling(HttpServletRequest request,
			HttpServletResponse response, CloudVmBuyDetailVo vo,
			ModelMap modelMap) {
		// 选择计费类型，一次性，周期性（年，月，日）

		request.getSession().setAttribute("productQuickBuy_countNum",
				vo.getCount());
		request.getSession().setAttribute("productQuickBuy_vmName",
				vo.getVmName());
		request.getSession().setAttribute("productQuickBuy_stopTime",
				vo.getStopTime());
		String product_quickCombnetType = (String) request.getSession()
				.getAttribute("product_quickCombnetType");
		String prodId = (String) request.getSession().getAttribute(
				"product_quickCombProdId");
		CloudProductPriceVo cloudProdPrice = null;
		CloudProductQuickBuyVo quickBuyVo = new CloudProductQuickBuyVo();
		try {
			cloudProdPrice = cloudProductPriceService.getPriceByProdId(prodId);
			quickBuyVo = addToCountPrice(cloudProdPrice, quickBuyVo);

			if (StringUtils.isNotBlank(quickBuyVo.getPriceMode())
					&& quickBuyVo.getPriceMode().equals(
							Constants.PRICE_MODE_ONE_TIME)) {
				quickBuyVo.setOneTimePrice(quickBuyVo.getOneTimePrice()
						* vo.getCount());
				quickBuyVo.setOneTimeRebatePrice(quickBuyVo
						.getOneTimeRebatePrice() * vo.getCount());
			} else if (StringUtils.isNotBlank(quickBuyVo.getPriceMode())
					&& quickBuyVo.getPriceMode().equals(
							Constants.PRICE_MODE_CYCLE)) {
				quickBuyVo.setYearPrice(quickBuyVo.getYearPrice()
						* vo.getCount());
				quickBuyVo.setYearRebatePrice(quickBuyVo.getYearRebatePrice()
						* vo.getCount());
				quickBuyVo.setMonthPrice(quickBuyVo.getMonthPrice()
						* vo.getCount());
				quickBuyVo.setMonthRebatePrice(quickBuyVo.getMonthRebatePrice()
						* vo.getCount());
				quickBuyVo
						.setDayPrice(quickBuyVo.getDayPrice() * vo.getCount());
				quickBuyVo.setDayRebatePrice(quickBuyVo.getDayRebatePrice()
						* vo.getCount());
				quickBuyVo.setHourPrice(quickBuyVo.getHourPrice() * vo.getCount());
				quickBuyVo.setHourRebatePrice(quickBuyVo.getHourRebatePrice()
						* vo.getCount());
			}
			modelMap.put("quickBuyVo", quickBuyVo);
			request.getSession().setAttribute("quickBuyVo", quickBuyVo);
		} catch (ValidatorException e) {
			// TODO Auto-generated catch block
			modelMap.put("message", "获取选择计费时失败!");
			e.printStackTrace();
			if (StringUtils.isNotBlank(product_quickCombnetType)
					&& product_quickCombnetType.equals(NetworkType.Basic
							.toString())) {
				return "product/productQuickBuy_basicHostConfig";
			} else {
				return "product/productQuickBuy_advanceHostConfig";
			}
		}
		// 跳转到配置虚拟机页面
		return "product/productQuickBuy_selectBilling";
	}

	/**
	 * 产品购买-快速购买-完成购买
	 * 
	 * @param request
	 * @param response
	 * @param vo
	 * @param modelMap
	 * @return
	 */
	@RequestMapping(value = "finishBuy")
	public String finishBuy(HttpServletRequest request,
			HttpServletResponse response, CloudUserOrderVo vo, ModelMap modelMap) {
		// 获取用户选择的配置方案、虚拟机配置信息
		double rebatePrice = 0;
		double price = 0;
		CloudProductQuickBuyVo quickBuyVo = (CloudProductQuickBuyVo) request
				.getSession().getAttribute("quickBuyVo");
		String comPriceType = request.getParameter("comPriceType");
		String comBillingCycle = null;
		if (StringUtils.isNotBlank(comPriceType)) {
			if ("compOneTime".equals(comPriceType)) {
				comBillingCycle = null;
				rebatePrice = quickBuyVo.getOneTimeRebatePrice();
				price = quickBuyVo.getOneTimePrice();
			} else if ("compYear".equals(comPriceType)) {
				comBillingCycle = Constants.BILLING_CYCLE_YEAR;
				rebatePrice = quickBuyVo.getYearRebatePrice();
				price = quickBuyVo.getYearPrice();
			} else if ("compMonth".equals(comPriceType)) {
				comBillingCycle = Constants.BILLING_CYCLE_MONTH;
				rebatePrice = quickBuyVo.getMonthRebatePrice();
				price = quickBuyVo.getMonthPrice();
			} else if ("compDay".equals(comPriceType)) {
				comBillingCycle = Constants.BILLING_CYCLE_DAY;
				rebatePrice = quickBuyVo.getDayRebatePrice();
				price = quickBuyVo.getDayPrice();
			}else{
				comBillingCycle = Constants.BILLING_CYCLE_HOUR;
				rebatePrice = quickBuyVo.getHourRebatePrice();
				price = quickBuyVo.getHourPrice();
			}
		}
		if (rebatePrice == 0 || price == 0) {
			modelMap.put("message", "购买虚拟机失败！");
			return "product/productQuickBuy_selectBilling";
		}
		// 获取当前用户或账户信息.
		BasicUserVo account = null;
		BasicUserVo user = (BasicUserVo) request.getSession().getAttribute(
				Constants.SESSION_USER_KEY);
		if (null != user) {
			if (user.getUserFlag() == Constants.USER_FLAG_USER) {
				try {
					account = basicUserService.get(user.getParentBasicUser()
							.getUserId());
				} catch (ValidatorException e) {
					// TODO Auto-generated catch block
					logger.equals("can't get BasicAccount.");
					modelMap.put("message",
							"购买虚拟机失败！原因是：账户信息不存在:" + e.getMessage());
					return "product/productQuickBuy_finishBuy";
				}
			} else if (user.getUserFlag() == Constants.USER_FLAG_ACCOUNT) {
				account = user;
			}
		}
		// 获取session中的参数。
		SimpleDateFormat sd = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		String product_quickCombnetType = (String) request.getSession()
				.getAttribute("product_quickCombnetType");
		String product_quickCombProdId = (String) request.getSession()
				.getAttribute("product_quickCombProdId");
		String product_quickCombZoneId = (String) request.getSession()
				.getAttribute("product_quickCombZoneId");
		String product_quickCombNetIds = (String) request.getSession()
				.getAttribute("product_quickCombNetIds");
		String product_quickSecGroupIds = (String) request.getSession()
				.getAttribute("product_quicksetGroupIds");
		CloudMdmNetworkVo mdmNetworkVo = (CloudMdmNetworkVo) request.getSession()
				.getAttribute("Qucik_network");
		

		int count = (Integer) request.getSession().getAttribute(
				"productQuickBuy_countNum");
		String vmName = (String) request.getSession().getAttribute(
				"productQuickBuy_vmName");
		String stopTime = (String) request.getSession().getAttribute(
				"productQuickBuy_stopTime");
		Date stopTimeDate = null;
		if (StringUtils.isNotBlank(stopTime)) {
			try {
				stopTimeDate = sd.parse(stopTime);
			} catch (ParseException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		// 购买时账户费用不足，购买失败。
		try {
			AccountExpenseVo expVo = accountExpenseService
					.getExpenseByUserId(account.getUserId());
			if (expVo == null
					|| (expVo.getPayTotalAmount() - expVo.getExpTotalAmount()) < rebatePrice) {
				modelMap.put("message", "购买虚拟机失败，账户费用不足，请充值。");
				return "product/productQuickBuy_finishBuy";
			}
		} catch (Exception e) {
			logger.error("get error in making VM" + e.getMessage());
			modelMap.put("message", "创建虚拟机失败!" + e.getMessage());
			return "product/productQuickBuy_finishBuy";
		}

		// 获取各元素的接口ID
		CloudVmCellDetailVo cloudVmCellDetailVo = null;
		List<String> networkOrSecuritygroupIds = new ArrayList<String>();
		String[] product_quickNetArray = null;
		try {
			cloudVmCellDetailVo = cloudMdmProductItemService
					.getVmCellDetailByProdId(product_quickCombProdId);
			if (StringUtils.isNotBlank(product_quickCombnetType)
					&& product_quickCombnetType.equals(NetworkType.Basic
							.toString())
					&& StringUtils.isNotBlank(product_quickSecGroupIds)) {
				product_quickNetArray = product_quickSecGroupIds.split(",");
				for (String product_quickSecGroupId : product_quickNetArray) {
					CloudSecurityGroupVo cloudSecurityGroupVo = cloudSecurityGroupService
							.get(product_quickSecGroupId);
					networkOrSecuritygroupIds.add(cloudSecurityGroupVo
							.getInterfaceId());
				}
			} else if (StringUtils.isNotBlank(product_quickCombnetType)
					&& product_quickCombnetType.equals(NetworkType.Advanced
							.toString())) {
				if (StringUtils.isNotBlank(product_quickCombNetIds)) {
					product_quickNetArray = product_quickCombNetIds.split(",");
					for (String product_quickCombNetId : product_quickNetArray) {
						CloudMdmNetworkVo cloudMdmNetworkVo = cloudMdmNetworkService
								.get(product_quickCombNetId);
						networkOrSecuritygroupIds.add(cloudMdmNetworkVo
								.getInterfaceId());
					}
				} else {
					networkOrSecuritygroupIds
							.add(mdmNetworkVo.getInterfaceId());
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
			logger.error("get error in making VM" + e.getMessage());
			modelMap.put("message", "创建虚拟机失败!" + e.getMessage());
			return "product/productQuickBuy_finishBuy";
		}
		// 写入订单以及订单明细.
		try {

			if (null != cloudVmCellDetailVo && null != user
					&& StringUtils.isNotBlank(product_quickCombZoneId)) {
				String zoneIFId = cloudMdmZoneService.get(
						product_quickCombZoneId).getInterfaceId();
				for (int i = 0; i < count; i++) {
					CloudOrderApprovalVo cloudOrderAppprovalVo = new CloudOrderApprovalVo();
					CloudUserOrderVo cloudUserOrderVo = new CloudUserOrderVo();
					cloudUserOrderVo.setBasicUser(user);
					cloudUserOrderVo.setBasicAccount(account);
					cloudUserOrderVo.setBillingCycle(comBillingCycle);
					cloudUserOrderVo
							.setBillingFlag(Constants.BILLING_FALG_STOP);
					cloudUserOrderVo.setBuyType(Constants.PROD_BUY_QUICK);
					cloudUserOrderVo.setCreated(new Date());
					cloudUserOrderVo.setCreatedBy(user.getUserAccount());
					cloudUserOrderVo.setOrderTime(new Date());
					cloudUserOrderVo.setVmName(count > 1 ? vmName + i : vmName);
					cloudUserOrderVo.setState(String
							.valueOf(Constants.INVALID_STATE));
					
					String[] netIdsArr = new String[networkOrSecuritygroupIds
							.size()];
					netIdsArr = networkOrSecuritygroupIds.toArray(netIdsArr);
					String netIds = "";

					for (String netId : netIdsArr) {
						netIds += netId + ",";
					}
					if (!"".equals(netIds)) {
						netIds = netIds.substring(0, netIds.lastIndexOf(","));
					}
					cloudUserOrderVo.setNetIds(netIds);
					cloudUserOrderVo.setOrderType(Constants.ORDER_TYPE_VM);
					if("compOneTime".equals(comPriceType)){
						cloudUserOrderVo.setOneTimeProdAmount(price*1.0/count);
						cloudUserOrderVo.setOneTimeRebateAmount(rebatePrice*1.0/count);
					}else{
						cloudUserOrderVo.setCycleOrderAmount(price*1.0/count);
						cloudUserOrderVo.setCycleRebateAmount(rebatePrice*1.0/count);
					}
					CloudUserOrderItemVo cloudUserOrderItemVo = new CloudUserOrderItemVo();

					if (!comPriceType.equals("compOneTime")) {
						cloudUserOrderItemVo
								.setBillingType(Constants.BILLING_TYPE_CYCLE);
						cloudUserOrderItemVo
								.setOneTimeBillingFlag(Constants.BILLING_FALG_STOP);
					} else {
						cloudUserOrderItemVo
								.setBillingType(Constants.BILLING_TYPE_SINGLE);
						cloudUserOrderItemVo
								.setOneTimeBillingFlag(Constants.BILLING_FALG_STOP);
					}
					cloudUserOrderItemVo
							.setBillingFlag(Constants.INVALID_STATE);

					cloudUserOrderItemVo
							.setCloudMdmProduct(cloudMdmProductService
									.get(product_quickCombProdId));
					cloudUserOrderItemVo.setCloudUserOrder(cloudUserOrderVo);
					cloudUserOrderItemVo
							.setProdType(Constants.PROD_TYPE_COMP_PROD);
					cloudUserOrderItemVo
							.setCloudMdmProductItem(cloudMdmProductItemService
									.getprodItemByProdId(product_quickCombProdId));
					if (null != quickBuyVo.getCloudPromotionValue()) {
						cloudUserOrderItemVo.setPromotionId(quickBuyVo
								.getCloudPromotionValue().getPromotionId());
						cloudUserOrderItemVo.setRebateFlag(quickBuyVo
								.getCloudPromotionValue().getRebateFlag());
						cloudUserOrderItemVo.setRebateAmount(quickBuyVo
								.getCloudPromotionValue().getRebateAmount());
					}
					cloudUserOrderVo.setBeginBillingTime(DateUtil
							.convertDate(DateUtil.formatDate(DateUtil
									.getAfterDay(new Date(), 1))));
					cloudUserOrderVo.setNextBillingTime(DateUtil
							.convertDate(DateUtil.formatDate(DateUtil
									.getAfterDay(new Date(), 1))));
					cloudUserOrderItemVo.setBeginBillingTime(DateUtil
							.convertDate(DateUtil.formatDate(DateUtil
									.getAfterDay(new Date(), 1))));
					cloudUserOrderItemVo.setNextBillingTime(DateUtil
							.convertDate(DateUtil.formatDate(DateUtil
									.getAfterDay(new Date(), 1))));
					cloudUserOrderService.saveOrder(cloudUserOrderVo,
							cloudUserOrderItemVo);
					cloudOrderAppprovalVo.setBasicAccount(account);
					cloudOrderAppprovalVo.setBasicUser(user);
					cloudOrderAppprovalVo.setCloudUserOrder(cloudUserOrderVo);
					cloudOrderAppprovalVo
							.setCloudCpuSoln(this.cloudMdmCPUSolnService
									.getMdmCPUSolnByInterfaceId(cloudVmCellDetailVo
											.getServiceofferingid()));
					cloudOrderAppprovalVo
							.setCloudMdmDiskSoln(this.cloudMdmDiskSolnService
									.getMdmDiskSolnByInterfaceId(cloudVmCellDetailVo
											.getDiskofferingid()));
					cloudOrderAppprovalVo
							.setCloudMdmTemplate(this.cloudMdmTemplateService
									.getMdmTemplateByInterfaceId(cloudVmCellDetailVo
											.getTemplateid()));
					cloudOrderAppprovalVo.setCloudMdmZone(cloudMdmZoneService.get(
							product_quickCombZoneId));
					cloudOrderAppprovalVo.setNetIds(netIds);
				    cloudOrderAppprovalVo.setCreatedBy(user.getUserName());
					cloudOrderAppprovalVo.setStopTime(stopTimeDate);
					cloudOrderAppprovalVo.setVmName(count > 1 ? vmName + i
							: vmName);
					cloudOrderAppprovalVo.setCreated(new Date());
					cloudOrderAppprovalService.save(cloudOrderAppprovalVo);
					if (user.getUserFlag() == Constants.USER_FLAG_ACCOUNT) {

						CloudMdmVmVo vm = cloudMdmVMService.create(
								user.getUserAccount(), zoneIFId,
								cloudVmCellDetailVo.getServiceofferingid(),
								cloudVmCellDetailVo.getDiskofferingid(),
								cloudVmCellDetailVo.getTemplateid(),
								networkOrSecuritygroupIds, count > 1 ? vmName
										+ i : vmName, null, stopTimeDate);

						if (null != vm) {
							cloudUserOrderVo.setCloudMdmVm(vm);
							cloudUserOrderVo.setState(String
									.valueOf(Constants.VALID_STATE));
							cloudOrderAppprovalVo.setCloudMdmVm(vm);
							cloudUserOrderVo
									.setBillingFlag(Constants.BILLING_FALG_START);
							cloudUserOrderItemVo
									.setBillingFlag(Constants.BILLING_FALG_START);
							cloudUserOrderVo.setBeginBillingTime(DateUtil
									.convertDate(DateUtil.formatDate(DateUtil
											.getAfterDay(new Date(), 1))));
							cloudUserOrderVo.setNextBillingTime(DateUtil
									.convertDate(DateUtil.formatDate(DateUtil
											.getAfterDay(new Date(), 1))));
							cloudUserOrderItemVo.setBeginBillingTime(DateUtil
									.convertDate(DateUtil.formatDate(DateUtil
											.getAfterDay(new Date(), 1))));
							cloudUserOrderItemVo.setNextBillingTime(DateUtil
									.convertDate(DateUtil.formatDate(DateUtil
											.getAfterDay(new Date(), 1))));
						}
						cloudOrderAppprovalVo.setApprovalFlag(String
								.valueOf(Constants.VALID_STATE));
					}
				if (user.getUserFlag() == Constants.USER_FLAG_USER) {
						cloudOrderAppprovalVo.setApprovalFlag(String
								.valueOf(Constants.INVALID_STATE));
						cloudUserOrderItemVo.setBeginBillingTime(null);
						cloudUserOrderItemVo.setNextBillingTime(null);
						cloudUserOrderVo.setNextBillingTime(null);
						cloudUserOrderVo.setBeginBillingTime(null);
						cloudOrderAppprovalVo.setCloudMdmVm(null);
						
					}
					cloudUserOrderService.saveOrder(cloudUserOrderVo,
							cloudUserOrderItemVo);
					cloudOrderAppprovalService.save(cloudOrderAppprovalVo);
				}
			} else {
				modelMap.put("message", "创建虚拟机失败!");
				return "product/productQuickBuy_finishBuy";
			}
		} catch (Exception e) {
			modelMap.put("message", "创建虚拟机失败！" + e.getMessage());
			e.printStackTrace();
			return "product/productQuickBuy_finishBuy";
		}
		// 清楚session数据。
		request.getSession().setAttribute("product_quickCombnetType", null);
		request.getSession().setAttribute("product_quickCombProdId", null);
		request.getSession().setAttribute("product_quickCombZoneId", null);
		request.getSession().setAttribute("product_quickCombNetIds", null);
		request.getSession().setAttribute("product_quicksetGroupIds", null);
		request.getSession().setAttribute("productQuickBuy_countNum", null);
		request.getSession().setAttribute("productQuickBuy_vmName", null);
		request.getSession().setAttribute("productQuickBuy_stopTime", null);
		request.getSession().setAttribute("product_quickuserAccount", null);
		request.getSession().setAttribute("quickBuyVo", null);
		if (user.getUserFlag() == Constants.USER_FLAG_USER) {
			modelMap.put("message", "您提交的信息已保存，请等待上级审批。");
		}else{
			modelMap.put("message", "虚拟机创建成功，请您稍后查看虚拟机列表。");
		}
		
		return "product/productQuickBuy_finishBuy";
	}

	private CloudProductQuickBuyVo addToCountPrice(CloudProductPriceVo priceVo,
			CloudProductQuickBuyVo quickBuyVo) {

		CloudPromotionValue promValue = null;
		quickBuyVo.setPriceMode(priceVo.getPriceMode());
		// 一次性收费
		if ("0".equals(priceVo.getPriceMode())) {
			// 一次性收费 促销
			promValue = this.cloudPromotionProductService
					.getDiscountAmountByProdId(priceVo.getCloudMdmProduct()
							.getId(), priceVo.getOneTimePrice());
			if (null != promValue) {
				quickBuyVo.setOneTimePrice(priceVo.getOneTimePrice());
				quickBuyVo.setOneTimeRebatePrice(promValue.getDiscountAmount());
				quickBuyVo.setActivityName(promValue.getActivityName());
			} else {
				quickBuyVo.setOneTimePrice(priceVo.getOneTimePrice());
				quickBuyVo.setOneTimeRebatePrice(priceVo.getOneTimePrice());
			}

		} else {
			//小时购买
			quickBuyVo.setHourPrice(priceVo.getHourPrice());
			promValue = this.cloudPromotionProductService
					.getDiscountAmountByProdId(priceVo.getCloudMdmProduct()
							.getId(), priceVo.getHourPrice());
			if (null != promValue) {
				quickBuyVo.setHourRebatePrice(promValue.getDiscountAmount());
				quickBuyVo.setActivityName(promValue.getActivityName());
			} else {
				quickBuyVo.setHourRebatePrice(priceVo.getHourPrice());
			}
			// 日价格促销
			quickBuyVo.setDayPrice(priceVo.getDayPrice());
			promValue = this.cloudPromotionProductService
					.getDiscountAmountByProdId(priceVo.getCloudMdmProduct()
							.getId(), priceVo.getDayPrice());
			if (null != promValue) {
				quickBuyVo.setDayRebatePrice(promValue.getDiscountAmount());
				quickBuyVo.setActivityName(promValue.getActivityName());
			} else {
				quickBuyVo.setDayRebatePrice(priceVo.getDayPrice());
			}

			// 月价格促销
			quickBuyVo.setMonthPrice(priceVo.getMonthPrice());
			promValue = this.cloudPromotionProductService
					.getDiscountAmountByProdId(priceVo.getCloudMdmProduct()
							.getId(), priceVo.getMonthPrice());
			if (null != promValue) {
				quickBuyVo.setMonthRebatePrice(promValue.getDiscountAmount());
				quickBuyVo.setActivityName(promValue.getActivityName());
			} else {
				quickBuyVo.setMonthRebatePrice(priceVo.getMonthPrice());
			}

			// 年价格促销
			quickBuyVo.setYearPrice(priceVo.getYearPrice());
			promValue = this.cloudPromotionProductService
					.getDiscountAmountByProdId(priceVo.getCloudMdmProduct()
							.getId(), priceVo.getYearPrice());
			if (null != promValue) {
				quickBuyVo.setYearRebatePrice(promValue.getDiscountAmount());
				quickBuyVo.setActivityName(promValue.getActivityName());
			} else {
				quickBuyVo.setYearRebatePrice(priceVo.getYearPrice());
			}
		}
		quickBuyVo.setCloudPromotionValue(promValue);
		return quickBuyVo;
	}

	/**
	 * 我的网络 - 高级网络 - 初始化添加网络页面
	 * 
	 * @param request
	 * @param response
	 * @param vo
	 * @param modelMap
	 * @return
	 * @throws ValidatorException
	 */
	@RequestMapping(value = "addHighNet")
	public String addHighNet(HttpServletRequest request,
			HttpServletResponse response, CloudMdmProductVo vo,
			ModelMap modelMap) throws ValidatorException {

		QueryContext context = new ECContext(request, modelMap, "addNet");
		context.clearParmeters();
		context.put("$eq_networkType", NetworkType.Advanced.toString());
		List<?> dclist = this.cloudMdmZoneService.list(context);
		modelMap.put("dclist", dclist);

		String zoneId = request.getParameter("zoneId");
		List<?> netWorklist = this.cloudMdmProductItemService
				.getNetworkSingleProd(zoneId);

		modelMap.put("netWorklist", netWorklist);
		modelMap.put("zoneId", zoneId);
		request.setAttribute("urlsource", request.getParameter("urlsource"));
		return "product/productQuickBuy_highNet_add";
	}

	/**
	 * 我的网络 - 高级网络 - 添加网络保存
	 * 
	 * @param request
	 * @param response
	 * @param vo
	 * @param modelMap
	 * @return
	 * @throws ValidatorException
	 */
	@RequestMapping(value = "saveHighNet")
	public String saveHighNet(HttpServletRequest request,
			HttpServletResponse response, CloudUserOrderVo vo, ModelMap modelMap) {
		try {
			try {
				BasicUserVo basicUser = (BasicUserVo) request.getSession()
						.getAttribute(Constants.SESSION_USER_KEY);
				String description = request.getParameter("description");
				String networkName = request.getParameter("networkName");
				String selValue = request.getParameter("selValue");
				String zoneId = request.getParameter("zoneId");
				String[] priceInfo = selValue.split("_");
				String prodId = priceInfo[0]; // 产品主表ID
				String price = priceInfo[1]; // 选择的计费价格
				String prodItemId = priceInfo[2]; // 产品子表ID
				String ifId = priceInfo[3]; // 接口元素ID
				String billingCycle = priceInfo[4]; // 计费周期

				// 主订单信息
				CloudUserOrderVo orderVo = new CloudUserOrderVo();
				BasicUserVo parentUser = basicUser;
				if (basicUser.getUserFlag() == Constants.USER_FLAG_USER) {
					parentUser = basicUser.getParentBasicUser();
				}
				orderVo.setBasicUser(parentUser);
				orderVo.setOrderTime(new Date());
				orderVo.setCloudMdmNetworkSoln(this.cloudMdmProductItemService
						.get(prodItemId).getMdmNetworkSoln());
				orderVo.setBuyType(Constants.PROD_BUY_SINGLE);
				orderVo.setBillingFlag(Constants.BILLING_FALG_STOP);// 是否开始计费
				if (!billingCycle.equals(Constants.BILLING_TYPE_SINGLE)) {
					orderVo.setBillingCycle(billingCycle);
				}
				orderVo.setState(String.valueOf(Constants.INVALID_STATE));
				orderVo.setCreated(new Date());
				orderVo.setCreatedBy(basicUser.getUserAccount());
				orderVo.setCreateId(basicUser.getUserId());
				orderVo.setOrderType(Constants.ORDER_TYPE_NETWORK);

				// 子订单信息
				CloudUserOrderItemVo itemVo = new CloudUserOrderItemVo();
				itemVo.setCloudUserOrder(orderVo);
				itemVo.setCloudMdmProduct(this.cloudMdmProductService
						.get(prodId));
				itemVo.setCloudMdmProductItem(this.cloudMdmProductItemService
						.get(prodItemId));
				itemVo.setProdType(Constants.PROD_TYPE_NETWORK_SOLN);
				// 是否开始计费
				itemVo.setBillingFlag(Constants.BILLING_FALG_STOP);
				// 一次性计费是否已发生（如果是周期性的本不用填写，填写了也没用影响）
				itemVo.setOneTimeBillingFlag(Constants.BILLING_FALG_STOP);

				// //开始计费时间=明天凌晨
				// itemVo.setBeginBillingTime(DateUtil.convertDate(DateUtil.formatDate(DateUtil.getAfterDay(new
				// Date(),1))));
				// //计费调度时填写
				// itemVo.setNextBillingTime(DateUtil.convertDate(DateUtil.formatDate(DateUtil.getAfterDay(new
				// Date(),1))));
				// 计费类型
				if (Constants.BILLING_TYPE_SINGLE.equals(billingCycle)) {
					itemVo.setBillingType(Constants.BILLING_TYPE_SINGLE);
				} else {
					itemVo.setBillingType(Constants.BILLING_TYPE_CYCLE);
				}
				// 获取产品促销价格
				CloudPromotionValue promo = cloudPromotionProductService
						.getDiscountAmountByProdId(prodId,
								Double.valueOf(price));
				if (promo != null) {
					itemVo.setPromotionId(promo.getPromotionId());
					itemVo.setRebateAmount(promo.getRebateAmount());
					itemVo.setRebateFlag(promo.getRebateFlag());
				}

				// 购买时账户费用不足，购买失败。
				AccountExpenseVo expVo = this.accountExpenseService
						.getExpenseByUserId(parentUser.getUserId());
				if (expVo == null
						|| (expVo.getPayTotalAmount() - expVo
								.getExpTotalAmount()) < Double.valueOf(price)) {
					modelMap.put("networkAddMsg", "网络添加失败，账户费用不足，请充值。");
					modelMap.put("netWorklist", new ArrayList<Object>());
					request.setAttribute("urlsource", request.getParameter("urlsource"));
					return "product/productQuickBuy_highNet_add";
				}

				// 保存购买订单
				this.cloudUserOrderService.saveOrder(orderVo, itemVo);

				// 调用接口创建网络
				CloudMdmNetworkVo networkVo = this.cloudMdmNetworkService
						.create(parentUser.getUserAccount(), zoneId, ifId,
								networkName, description);
				request.getSession().setAttribute("Qucik_network",networkVo);
				// 修改计费状态
				orderVo.setBillingFlag(Constants.BILLING_FALG_START);
				orderVo.setState(String.valueOf(Constants.VALID_STATE));
				orderVo.setCloudMdmNetwork(networkVo);

				itemVo.setBillingFlag(Constants.BILLING_FALG_START);
				this.cloudUserOrderService.saveOrder(orderVo, itemVo);

				modelMap.put("networkAddMsg",
						"网络添加成功，已开始计费，" + orderVo.getCycleName() + price + "元。");
			} catch (ValidatorException e) {
				modelMap.put("networkAddMsg", "网络添加失败：" + e.getMessage());
				e.printStackTrace();
			}
		} catch (CloudException e) {
			modelMap.put("networkAddMsg", "网络添加失败：" + e.getMessage());
			e.printStackTrace();
		}

		// 成功提示，收费提示信息：已进入计费时间
		modelMap.put("netWorklist", new ArrayList<Object>());
		request.setAttribute("urlsource", request.getParameter("urlsource"));
		return "product/productQuickBuy_highNet_add";
	}
}
