package sy.controller.finance;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.validation.Valid;

import org.apache.commons.lang.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.SessionAttributes;

import sy.common.model.ECContext;
import sy.common.model.QueryContext;
import sy.common.util.Constants;
import sy.common.util.DateUtil;
import sy.common.util.validator.ValidatorException;
import sy.controller.shared.BaseControllerTemplate;
import sy.domain.vo.base.BasicDictItemVo;
import sy.domain.vo.base.BasicUserVo;
import sy.domain.vo.expense.AccountExpenseVo;
import sy.domain.vo.finance.AccountPayVo;
import sy.service.base.BasicDictItemServiceI;
import sy.service.base.BasicUserServiceI;
import sy.service.expense.AccountExpenseServiceI;
import sy.service.finance.AccountPayServiceI;
import sy.service.promotion.CloudPromotionProductServiceI;
import sy.service.shared.BasicServiceI;


/**
 * 账户充值
 * @author luobin
 * 
 */
@Controller
@RequestMapping("/accPay")
@SessionAttributes("accountPayVo")
public class AccountPayController extends BaseControllerTemplate<AccountPayVo> {
	
	@Autowired
	private AccountPayServiceI accountPayService;
	@Autowired
	private BasicUserServiceI basicUserService;
	@Autowired
	private BasicDictItemServiceI basicDictItemService;
	@Autowired
	private AccountExpenseServiceI accountExpenseService;
	@Autowired
	private CloudPromotionProductServiceI cloudPromotionProductService;
	
	public AccountPayServiceI getAccountPayService() {
		return accountPayService;
	}

	public void setAccountPayService(AccountPayServiceI accountPayService) {
		this.accountPayService = accountPayService;
	}

	public BasicUserServiceI getBasicUserService() {
		return basicUserService;
	}

	public void setBasicUserService(BasicUserServiceI basicUserService) {
		this.basicUserService = basicUserService;
	}
	
	public BasicDictItemServiceI getBasicDictItemService() {
		return basicDictItemService;
	}

	public void setBasicDictItemService(
			BasicDictItemServiceI basicDictItemService) {
		this.basicDictItemService = basicDictItemService;
	}	
	
	public AccountExpenseServiceI getAccountExpenseService() {
		return accountExpenseService;
	}

	public void setAccountExpenseService(
			AccountExpenseServiceI accountExpenseService) {
		this.accountExpenseService = accountExpenseService;
	}

	public CloudPromotionProductServiceI getCloudPromotionProductService() {
		return cloudPromotionProductService;
	}

	public void setCloudPromotionProductService(
			CloudPromotionProductServiceI cloudPromotionProductService) {
		this.cloudPromotionProductService = cloudPromotionProductService;
	}

	public String getViewPath() {
		return "finance";
	}

	@Override
	public BasicServiceI<AccountPayVo> getService() {
		return accountPayService;
	}
	
	
	
	@Override
	protected void initContextParams(HttpServletRequest request,
			QueryContext context) {
		super.initContextParams(request, context);
	}

	/**
	 * 获取字典项信息
	 * @param request
	 */
	public void getDictItemInfo(HttpServletRequest request){
		List<BasicDictItemVo> userAccountTypeItemList = null;
		List<BasicDictItemVo> userIdentityItemList = null;
		List<BasicDictItemVo> industryDictItemList = null;
		List<BasicDictItemVo> geoDictItemList = null;
		try {
			//账户类别
			userAccountTypeItemList = basicDictItemService.getBaiscDictItemListByDictType("userAccountType");
			//账户类型
			userIdentityItemList = basicDictItemService.getBaiscDictItemListByDictType("userIdentity");
			//行业
			industryDictItemList = basicDictItemService.getBaiscDictItemListByDictType("industry");
			//地区
			geoDictItemList = basicDictItemService.getBaiscDictItemListByDictType("geo");
			
		} catch (Exception e) {
			e.printStackTrace();
		}
		request.setAttribute("userAccountType", userAccountTypeItemList);
		request.setAttribute("userIdentity", userIdentityItemList);
		request.setAttribute("industry", industryDictItemList);
		request.setAttribute("geo", geoDictItemList);
	}
	
	/**
	 * 获取账户充值列表信息
	 * @param request
	 * @param response
	 * @param vo
	 * @param modelMap
	 * @return
	 * @throws ValidatorException 
	 */
	@RequestMapping(value = "list")
	public String list(HttpServletRequest request, ModelMap modelMap) throws ValidatorException {
		this.getDictItemInfo(request);
		
		QueryContext context = new ECContext(request, modelMap, getNameSpace());
		//清理上一次查询参数
		context.clearParmeters();
		String queryType = request.getParameter("queryType");
		request.setAttribute("queryType", queryType);
		context.setSort(" payDate desc ");
		
		if("0".equals(queryType)){//账户类别一键式
			String userAccountTypeFlag = request.getParameter("userAccountTypeFlag");
			context.put("$eq_basicUser_userTypeDictItem_itemCode", userAccountTypeFlag);
			
		}else if("1".equals(queryType)){//账户类型一键式
			String userIdentityFlag = request.getParameter("userIdentityFlag");
			context.put("$eq_basicUser_userIdentityDictItem_itemCode", userIdentityFlag);
			
		}else if("2".equals(queryType)){//地区一键式
			String geoFlag = request.getParameter("geoFlag");
			context.put("$eq_basicUser_geoDictItem_itemCode", geoFlag);
			
		}else if("3".equals(queryType)){//行业一键式
			String industryFlag = request.getParameter("industryFlag");
			context.put("$eq_basicUser_industryDictItem_itemCode", industryFlag);			
			
		}else if("4".equals(queryType)){//充值方式一键式
			String payFlag = request.getParameter("payFlag");
			context.put("$eq_payType", payFlag);
			
		}else if("5".equals(queryType)){//充值日期一键式
			// 1:今日    2:本周     3:上周    4: 本月     5:上月     6:其它
			String timeFlag = request.getParameter("timeFlag");
			if ("1".equals(timeFlag)){
				context.put("$ge_payDate", DateUtil.getTodayDate());
				context.put("$le_payDate", DateUtil.getTodayDate());
				
			} else if ("2".equals(timeFlag)){
				context.put("$ge_payDate", DateUtil.getFirstDayOfCurrWeek());
				context.put("$le_payDate", DateUtil.getLastDayOfCurrWeek());
				
			} else if ("3".equals(timeFlag)){
				context.put("$ge_payDate", DateUtil.getFirstDayOfLastWeek());
				context.put("$le_payDate", DateUtil.getLastDayOfLastWeek());
				
			} else if ("4".equals(timeFlag)){
				context.put("$ge_payDate", DateUtil.getMonthFirstDay(null));
				context.put("$le_payDate", DateUtil.getMonthLastDay(null));
				
			} else if ("5".equals(timeFlag)){
				context.put("$ge_payDate", DateUtil.getFirstDayOfLastMonth());
				context.put("$le_payDate", DateUtil.getLastDayOfLastMonth());
				
			} else if ("6".equals(timeFlag)){
				context.put("$lt_payDate", DateUtil.getFirstDayOfLastMonth());
			}			
			
		}else{//高级搜索
			
			//充值日期
			String dateS = request.getParameter("dateS");
			String dateE = request.getParameter("dateE");
			String userName = request.getParameter("userName");
			String userAccount = request.getParameter("userAccount");
			context.put("$ge_payDate", dateS);
			context.put("$le_payDate", dateE);
			context.put("$lk_basicUser.userName", userName);
			context.put("$lk_basicUser.userAccount", userAccount);
			
			request.setAttribute("dateS", dateS);
			request.setAttribute("dateE", dateE);
			request.setAttribute("userName", userName);
			request.setAttribute("userAccount", userAccount);
			
			//账户类别
			String[] userAccountTypeArr = request.getParameterValues("userAccountType");
			String userAccountTypeStr = "";
			if(userAccountTypeArr != null && userAccountTypeArr.length > 0){
				for(int i=0; i<userAccountTypeArr.length; i++){
					userAccountTypeStr += userAccountTypeArr[i] + ",";
				}
				context.put("$in_basicUser_userTypeDictItem_itemCode", userAccountTypeStr.substring(0, userAccountTypeStr.length()-1));
				request.setAttribute("userAccountTypeStr", userAccountTypeStr.substring(0, userAccountTypeStr.length()-1));
			}
			
			//账户类型
			String[] userIdentityArr = request.getParameterValues("userIdentity");
			String userIdentityStr = "";
			if(userIdentityArr != null && userIdentityArr.length > 0){
				for(int i=0; i<userIdentityArr.length; i++){
					userIdentityStr += userIdentityArr[i] + ",";
				}
				context.put("$in_basicUser_userIdentityDictItem_itemCode", userIdentityStr.substring(0, userIdentityStr.length()-1));
				request.setAttribute("userIdentityStr", userIdentityStr.substring(0, userIdentityStr.length()-1));
			}

			//地区
			String[] geoArr = request.getParameterValues("geo");
			String geoStr = "";
			if(geoArr != null && geoArr.length > 0){
				for(int i=0; i<geoArr.length; i++){
					geoStr += geoArr[i] + ",";
				}
				context.put("$in_basicUser_geoDictItem_itemCode", geoStr.substring(0, geoStr.length()-1));
				request.setAttribute("geoStr", geoStr.substring(0, geoStr.length()-1));
			}

			//行业
			String[] industryArr = request.getParameterValues("industry");
			String industryStr = "";
			if(industryArr != null && industryArr.length > 0){
				for(int i=0; i<industryArr.length; i++){
					industryStr += industryArr[i] + ",";
				}
				context.put("$in_basicUser_industryDictItem_itemCode", industryStr.substring(0, industryStr.length()-1));
				request.setAttribute("industryStr", industryStr.substring(0, industryStr.length()-1));
			}
			//充值方式
			String[] payTypeArr = request.getParameterValues("payType");
			String payTypeStr = "";
			if(payTypeArr != null && payTypeArr.length > 0){
				for(int i=0; i<payTypeArr.length; i++){
					payTypeStr += payTypeArr[i] + ",";
				}
				context.put("$in_payType", payTypeStr.substring(0, payTypeStr.length()-1));
				request.setAttribute("payTypeStr", payTypeStr.substring(0, payTypeStr.length()-1));
			}
			
		}
		
		List<?> payList = getAccountPayService().list(context);
		context.initTotalRows(modelMap);
		modelMap.put("list", payList);
	
		return "finance/accountPayList";
	}

	/**
	 * 充值编辑页面
	 * @param request
	 * @param response
	 * @param vo
	 * @param modelMap
	 * @return
	 * @throws ValidatorException 
	 */
	@RequestMapping(value = "edit")
	public String edit(HttpServletRequest request, ModelMap modelMap, String id) throws ValidatorException {
		super.edit(request, modelMap, id);
		
		return "finance/accountPayEdit";
	}
	
	/**
	 * 保存账户充值信息
	 * @param request
	 * @param response
	 * @param vo
	 * @param modelMap
	 * @return
	 */
	@RequestMapping(method = RequestMethod.POST, value = "save")
	public String save(HttpServletRequest request, ModelMap modelMap, @Valid AccountPayVo payVo, BindingResult errors) {
		try {
			String userId = request.getParameter("userId");
			AccountExpenseVo expVo = this.accountExpenseService.getExpenseByUserId(userId);
//			if(expVo != null && null != expVo.getIsBilling() && expVo.getIsBilling() == 1){
//				modelMap.put("payMsg", "现在系统计费时间，请稍后再进行充值。");
//				return "finance/accountPayEdit";
//			}
			if(this.accountExpenseService.isBilling()){
				modelMap.put("payMsg", "现在系统计费时间，请稍后再进行充值。");
				return "finance/accountPayEdit";
			}
			
			BasicUserVo basicUser = this.basicUserService.get(userId);
			List<AccountPayVo> payList = new ArrayList<AccountPayVo>();
			
			//如果总费用表没有账户信息，则插入一条新的账户费用信息。
			boolean firstFlag = false;
			if(null == expVo){
				expVo = new AccountExpenseVo();
				expVo.setBasicUser(basicUser);
				expVo.setExpTotalAmount(0d);
				firstFlag = true;
			}
			
			//总金额 = 上次总金额 + 本次充值金额
			Double totalAmount = (null==expVo.getPayTotalAmount()) ? 0 : expVo.getPayTotalAmount();
			expVo.setPayTotalAmount(payVo.getPayAmount() + totalAmount);
			expVo.setPayUpdated(new Date());
			
			//充值明细信息
			payVo.setBasicUser(basicUser);
			Double remainingAmount = 0d;
			if(null != expVo){
				//充值后余额 = 充值总金额  - 费用总金额
				remainingAmount = expVo.getPayTotalAmount() - expVo.getExpTotalAmount();
			}
			payVo.setRemainingAmount(remainingAmount);
			
			payList.add(payVo);
//			this.accountPayService.savePay(payVo, expVo);
			
			
			AccountPayVo pVo = null;
			//首次充值返利计算
			if(firstFlag){
				//验证是否符合返利条件(获取返利金额)
				Double rebateAmount = this.cloudPromotionProductService.getFirstRebateAmount();
				if(rebateAmount != 0){
					//费用总表
					//AccountExpenseVo aeVo = this.accountExpenseService.getExpenseByUserId(userId);
					Double tolAmount = expVo.getPayTotalAmount();
					expVo.setPayTotalAmount(rebateAmount + tolAmount);
					expVo.setPayUpdated(new Date());
					
					//费用子表
					pVo = new AccountPayVo();
					pVo.setBasicUser(basicUser);
					pVo.setPayAmount(rebateAmount);
					pVo.setPayType(Constants.PAY_TYPE_FIRSTPAY);
					Double reAmount = 0d;
					if(null != expVo){
						//充值后余额 = 充值总金额  - 费用总金额
						reAmount = expVo.getPayTotalAmount() - expVo.getExpTotalAmount();
					}
					pVo.setRemainingAmount(reAmount);
					
					payList.add(pVo);
//					this.accountPayService.savePay(pVo, aeVo);
					
				}

			}else{
				//充值返利计
				//隐含条件：如果充值不消费，不应该计算返利，这样可以避免充值不消费再退款的情况发生（在申请退款时管理员自己考虑）
				//验证是否符合返利条件(获取返利金额)
				Double rebateAmount = this.cloudPromotionProductService.getRebateAmount(Constants.PROMOTIONTYPE_RECHARGE, payVo.getPayAmount());
				if(rebateAmount != null && rebateAmount != 0){
					//费用总表
					//AccountExpenseVo aeVo = this.accountExpenseService.getExpenseByUserId(userId);
					Double tolAmount = expVo.getPayTotalAmount();
					expVo.setPayTotalAmount(rebateAmount + tolAmount);
					expVo.setPayUpdated(new Date());
					
					//费用子表
					pVo = new AccountPayVo();
					pVo.setBasicUser(basicUser);
					pVo.setPayAmount(rebateAmount);
					pVo.setPayType(Constants.PAY_TYPE_TOPUPREBATE);
					Double reAmount = 0d;
					if(null != expVo){
						//充值后余额 = 充值总金额  - 费用总金额
						reAmount = expVo.getPayTotalAmount() - expVo.getExpTotalAmount();
					}
					pVo.setRemainingAmount(reAmount);
					
					payList.add(pVo);
//					this.accountPayService.savePay(pVo, aeVo);
					
				}
			}
			
			this.accountPayService.savePay(payList, expVo);
			modelMap.put("payMsg", "充值成功。");
			
		} catch (ValidatorException e) {
			modelMap.put("payMsg", "充值失败。");

			e.printStackTrace();
		}
		
		return "finance/accountPayEdit";
		//return getRedirectStr(getCloseView());
	}

	/**
	 * JQuery ajax获取账户余额
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	@RequestMapping(value = "getRemainingAmount")
	public String getRemainingAmount(HttpServletRequest request, HttpServletResponse response, ModelMap modelMap, String userId) throws ValidatorException {

		AccountExpenseVo expVo = this.accountExpenseService.getExpenseByUserId(userId);
		Double remainingAmount = 0d;
		if(null != expVo){
			remainingAmount = expVo.getPayTotalAmount() - expVo.getExpTotalAmount();
		}
		
		response.setCharacterEncoding("UTF-8");
	    try {
	      response.getWriter().println(remainingAmount.toString());
	      request.setAttribute("userId", userId);
	      
	    }catch (IOException e){
	      e.printStackTrace();
	    }
	    
		return null;
	}
	
	/**
	 * 账户详细信息
	 * @param request
	 * @param modelMap
	 * @return
	 */
	@RequestMapping(value = "detailInfo")
	public String detailInfo(HttpServletRequest request, ModelMap modelMap, String userId) throws ValidatorException {
		BasicUserVo basicUser = this.basicUserService.get(userId);
		request.setAttribute("basicUser", basicUser);
		 if(StringUtils.isNotBlank(userId) && null != basicUser){
			 if(basicUser.getState()==0){
			  request.setAttribute("stateName", "停用");
			}else if(basicUser.getState()==1){
				request.setAttribute("stateName", "未激活");
			}else if(basicUser.getState()==2){
				request.setAttribute("stateName", "待审批");
			}else if(basicUser.getState()==3){
				request.setAttribute("stateName", "审批通过");
			}else if(basicUser.getState()==-1){
				request.setAttribute("stateName", "注销");
			}else if(basicUser.getState()==-2){
				request.setAttribute("stateName", "审批拒绝");
			}else{
				request.setAttribute("stateName", "未定义");
			}
		 }
		return "base/acc_detailInfo";
	}

	@RequestMapping(value = "close")
	public String close(HttpServletRequest request, ModelMap modelMap,
			String id) throws ValidatorException {
		return "commons/close";
	}
	
}
