<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:tx="http://www.springframework.org/schema/tx" xmlns:context="http://www.springframework.org/schema/context" xsi:schemaLocation="
http://www.springframework.org/schema/beans
http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
http://www.springframework.org/schema/context
http://www.springframework.org/schema/context/spring-context-3.0.xsd
http://www.springframework.org/schema/tx
http://www.springframework.org/schema/tx/spring-tx-3.0.xsd"
 default-lazy-init="true">

	<!-- 引入属性文件 -->
	<context:property-placeholder location="classpath:config/*.properties" />

	<!-- 自动扫描dao和service包(自动注入) -->
	<context:component-scan base-package="sy.dao,sy.service" />

	<!-- JNDI方式配置数据源 -->
	<!-- <bean id="dataSource" class="org.springframework.jndi.JndiObjectFactoryBean"> <property name="jndiName" value="${jndiName}"></property> </bean> -->

	<!-- dbcp数据源 -->
	<bean name="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
		<property name="driverClassName" value="${driverClassName}"></property>
		<property name="url" value="${url}"></property>
		<property name="username" value="${username}"></property>
		<property name="password" value="${password}"></property>
		<property name="initialSize" value="${dbcp.initialSize}"/>
		<property name="maxActive" value="${dbcp.maxActive}" />
		<property name="minIdle" value="${dbcp.minIdle}" />
		<property name="maxIdle" value="${dbcp.maxIdle}" />
		<property name="logAbandoned" value="${dbcp.logAbandoned}" />
		<property name="removeAbandoned" value="${dbcp.removeAbandoned}" />
		<property name="removeAbandonedTimeout" value="${dbcp.removeAbandonedTimeout}" />
		<property name="maxWait" value="${dbcp.maxWait}" />
		<property name="testOnBorrow" value="${dbcp.testOnBorrow}"/>
		<property name="testOnReturn" value="${dbcp.testOnReturn}"/>
		<property name="testWhileIdle" value="${dbcp.testWhileIdle}"/>
		<property name="validationQuery" value="${dbcp.validationQuery}"/>
	</bean>

	<bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop>
				<prop key="hibernate.dialect">${hibernate.dialect}</prop>
				<prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
				<prop key="hibernate.format_sql">${hibernate.format_sql}</prop>
			</props>
		</property>

		<!-- 注解方式配置 -->
		<property name="packagesToScan">
			<list>
				<value>sy.domain.model</value>
			</list>
		</property>

		<!-- hbm方式配置 -->
<!-- 		<property name="mappingDirectoryLocations"> -->
<!-- 			<list> -->
<!-- 				<value>classpath:sy/hbm</value> -->
<!-- 			</list> -->
<!-- 		</property> -->
	</bean>
	
	<!-- 配置 dozer -->
<!-- 	<bean id="dozerBeanMapper" class="net.sf.dozer.util.mapping.DozerBeanMapper" scope="singleton"> -->
<!-- 		<property name="mappingFiles"> -->
<!-- 			<list> -->
<!-- 				<value>modules/petstore/spring-conf/dozerBeanMapping.xml</value> -->
<!-- 			</list> -->
<!-- 		</property> -->
<!-- 	</bean> -->
	

	<!-- 配置事物管理器，在*ServiceImpl里写@Transactional就可以启用事物管理 -->
	<bean name="transactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>
	<tx:annotation-driven transaction-manager="transactionManager" />
	
	
	<bean id="beansHolder" class="sy.common.util.spring.BeansHolder" /> 
	
	
	<!-- 使用这个的话会影响每次加入的配置（比如对于忽略null的映射） -->
    <bean id="mapper" class="org.dozer.spring.DozerBeanMapperFactoryBean" >
        <property name="mappingFiles" value="classpath:config/dozerBeanMapping.xml"/>
    </bean>
    
    <!-- 每次取出的mapperBean都是独立的，避免线程之间配置的干扰 -->
    <bean id="mapperBean" class="org.dozer.DozerBeanMapper" scope="prototype">
	  <property name="mappingFiles">
	    <list>
	      <value>classpath:config/dozerBeanMapping.xml</value>
	    </list>
	  </property>
	</bean>
    
    <bean id="mover" class="sy.common.util.move.Mover" >
    	<property name="mapper" ref="mapper"/>
    </bean>
	
	<bean id="validator" class="org.springframework.validation.beanvalidation.CustomValidatorBean"/>
	
	
	<bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl" autowire="byName">
	  	<property name="host" value="${mail.host}" />
	  	<property name="port">
            <value>${mail.port}</value>
        </property>
        <property name="username">
         	<value>${mail.username}</value>
        </property>
        <property name="password">
            <value>${mail.password}</value>
        </property>
		<property name="javaMailProperties">
		  	<props>
	            <prop key="mail.smtp.auth">${mail.smtp.auth}</prop>
	            <prop key="mail.smtp.timeout">${mail.smtp.timeout}</prop>
	            <prop key="mail.smtp.starttls.enable">${mail.smtp.starttls.enable}</prop>
	            <prop key="mail.smtp.socketFactory.class">${mail.smtp.socketFactory.class}</prop>
	            <prop key="mail.smtp.socketFactory.fallback">${mail.smtp.socketFactory.fallback}</prop>
	        </props>
	  	</property>
  	</bean>

	<bean id="emailHandler" class="sy.common.mail.EmailHandler" autowire="byName">
		<property name="mailSender" ref="mailSender" />
		<property name="fromEmail" value="${mail.from}" />
	</bean>
	
	
	<bean id="containerStartupListener" class="sy.service.shared.ContainerStartupListener" lazy-init="false" />
</beans>