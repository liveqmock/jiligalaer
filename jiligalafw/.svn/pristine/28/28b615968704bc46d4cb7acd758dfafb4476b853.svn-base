/*
 * 创建日期 2005-7-1
 *
 */
package sy.util2;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.UnsupportedEncodingException;
import java.net.URL;
import java.util.Arrays;
import java.util.Calendar;

import org.apache.log4j.Logger;

import com.cits.common.constance.OnlineConstance;
import com.cits.online.buzlogic.bo.OperatorBO;
import com.cits.online.common.config.ConfigFacade;
import com.cits.online.common.config.ConfigNames;
import com.cits.online.common.ioc.IoC;
import com.cits.online.common.login.OperatorFactory;

/**
 * Voucher发送时文件处理共通
 * 
 * @author Kangxj
 */
public class CITFileProcessUtil {
	/** 日志 */
	protected static Logger logger = (Logger) IoC.get("Logger");

	/**
	 * 从指定的URL地址读入数据流，存指定的文件。传真发送用。
	 * 
	 * 
	 * @param url 发送文件的URL
	 * @param processType 处理类型（传真、邮件等）
	 * 
	 * 
	 * @return 指定的文件的文件名
	 * 
	 */
	public static String FileProcess(URL url, String processType) {
		String charset = OnlineConstance.DEFAULT_CHARSET;

		// 用户信息取得
		String loginUser = "";

		try {
			OperatorBO operatorbo = (OperatorBO) OperatorFactory.getOperator().getOperatorBO();
			loginUser = operatorbo.getOperator_id();
		} catch (Exception e) {
			e.printStackTrace();
		}

		// 文件名取得

		String file_name = "";

		if (processType.equals(OnlineConstance.VOUCHER_TYPE_FAX)) {
			file_name = "FAX_HT_";
		}

		if (processType.equals(OnlineConstance.VOUCHER_TYPE_EMAIL)) {
			file_name = "EMAIL_HT_";
		}

		Calendar c = DateUtil.getSystemDate();
		String year = (new Integer(c.get(Calendar.YEAR))).toString();
		String month = (new Integer(c.get(Calendar.MONTH) + 1)).toString();
		String day = (new Integer(c.get(Calendar.DATE))).toString();
		String hour = (new Integer(c.get(Calendar.HOUR_OF_DAY))).toString();
		String minute = (new Integer(c.get(Calendar.MINUTE))).toString();
		String second = (new Integer(c.get(Calendar.SECOND))).toString();

		if (month.length() != 2) {
			month = "0" + month;
		}

		if (day.length() != 2) {
			day = "0" + day;
		}

		if (hour.length() != 2) {
			hour = "0" + hour;
		}

		if (minute.length() != 2) {
			minute = "0" + minute;
		}

		if (second.length() != 2) {
			second = "0" + second;
		}

		file_name = file_name + loginUser + "_" + year + month + day + hour + minute + second + ".html";

		// 存储文件

		OutputStreamWriter osw = null;
		InputStreamReader isr = null;

		try {
			//
			// 取得临时文件存放路径
			//
			File filePath = new File(getFilePath());

			//
			// 如果路径不存在，创建该路径。

			// 创建失败，返回NULL
			//
			if (!filePath.exists()) {
				// 创建临时文件存放路径
				boolean mkdirsSuccess = filePath.mkdirs();

				if (!mkdirsSuccess) {
					logger.error("指定的路径不存在，创建路径失败。" + getFilePath());

					return null;
				} else {
					logger.info("指定路径不存在，自动创建路径:" + getFilePath());
				}
			} // end if

			// 从URL读入
			isr = new InputStreamReader(url.openStream(), charset);

			osw = new OutputStreamWriter(new FileOutputStream(new File(getFilePath(), file_name)), charset);

			char[] buffer = new char[1024];
			Arrays.fill(buffer, (char) 0);

			int bufferLen = 0;

			// 从InputStreamReader读入
			while (-1 != (bufferLen = isr.read(buffer))) {

				// write to output with exact length of buffer
				osw.write(buffer, 0, bufferLen);

				// 清空buffer
				Arrays.fill(buffer, (char) 0);
			}

			osw.flush();

			buffer = null;

		} catch (FileNotFoundException e) {
			file_name = null;
			logger.error("创建文件失败，指定的文件不存在。", e);
		} catch (UnsupportedEncodingException e) {
			file_name = null;
			logger.error("创建文件失败，指定的编码方式不存在。", e);
		} catch (IOException e) {
			file_name = null;
			logger.error("创建文件失败，输入输出系统错误。", e);
		} finally {
			// 关闭OutputStreamWriter
			if (osw != null) {
				try {
					osw.close();
				} catch (IOException e4) {
				}
			}

			// 关闭InputStreamReader
			if (isr != null) {
				try {
					isr.close();
				} catch (IOException e5) {
				}
			}
		}

		return file_name;
	}

	private static String priFileProcess(URL url, String processType, String businessType, String ah_id, String operator_id) {

		String charset = OnlineConstance.DEFAULT_CHARSET;

		// 用户信息取得
		String loginUser = operator_id;

		// try {
		// OperatorBO operatorbo = (OperatorBO) OperatorFactory.getOperator()
		// .getOperatorBO();
		// loginUser = operatorbo.getOperator_id();
		// } catch (Exception e) {
		// e.printStackTrace();
		// }

		// 文件名取得

		String file_name = "";

		if (processType.equals(OnlineConstance.VOUCHER_TYPE_FAX)) {
			file_name = "FAX_" + businessType + "_";
		}

		if (processType.equals(OnlineConstance.VOUCHER_TYPE_EMAIL)) {
			file_name = "EMAIL_" + businessType + "_";
		}

		Calendar c = DateUtil.getSystemDate();
		String year = (new Integer(c.get(Calendar.YEAR))).toString();
		String month = (new Integer(c.get(Calendar.MONTH) + 1)).toString();
		String day = (new Integer(c.get(Calendar.DATE))).toString();
		String hour = (new Integer(c.get(Calendar.HOUR_OF_DAY))).toString();
		String minute = (new Integer(c.get(Calendar.MINUTE))).toString();
		String second = (new Integer(c.get(Calendar.SECOND))).toString();

		if (month.length() != 2) {
			month = "0" + month;
		}

		if (day.length() != 2) {
			day = "0" + day;
		}

		if (hour.length() != 2) {
			hour = "0" + hour;
		}

		if (minute.length() != 2) {
			minute = "0" + minute;
		}

		if (second.length() != 2) {
			second = "0" + second;
		}

		file_name = file_name + loginUser + "_" + year + month + day + hour + minute + second + ".html";

		// 存储文件

		OutputStreamWriter osw = null;
		InputStreamReader isr = null;

		try {
			//
			// 取得临时文件存放路径
			//
			File filePath = new File(getFilePath());

			//
			// 如果路径不存在，创建该路径。

			// 创建失败，返回NULL
			//
			if (!filePath.exists()) {
				// 创建临时文件存放路径
				boolean mkdirsSuccess = filePath.mkdirs();

				if (!mkdirsSuccess) {
					logger.error("指定的路径不存在，创建路径失败。" + getFilePath());

					return null;
				} else {
					logger.info("指定路径不存在，自动创建路径:" + getFilePath());
				}
			} // end if

			// 从URL读入
			isr = new InputStreamReader(url.openStream(), charset);

			osw = new OutputStreamWriter(new FileOutputStream(new File(getFilePath(), file_name)), charset);

			char[] buffer = new char[1024];
			Arrays.fill(buffer, (char) 0);

			int bufferLen = 0;

			// 从InputStreamReader读入
			while (-1 != (bufferLen = isr.read(buffer))) {

				// write to output with exact length of buffer
				osw.write(buffer, 0, bufferLen);

				// 清空buffer
				Arrays.fill(buffer, (char) 0);
			}

			osw.flush();

			buffer = null;

		} catch (FileNotFoundException e) {
			file_name = null;
			logger.error("创建文件失败，指定的文件不存在。", e);
		} catch (UnsupportedEncodingException e) {
			file_name = null;
			logger.error("创建文件失败，指定的编码方式不存在。", e);
		} catch (IOException e) {
			file_name = null;
			logger.error("创建文件失败，输入输出系统错误。", e);
		} finally {
			// 关闭OutputStreamWriter
			if (osw != null) {
				try {
					osw.close();
				} catch (IOException e4) {
				}
			}

			// 关闭InputStreamReader
			if (isr != null) {
				try {
					isr.close();
				} catch (IOException e5) {
				}
			}
		}

		return file_name;

	}

	/**
	 * 从指定的URL地址读入数据流，存指定的文件。传真发送用。 <br>
	 * addby(yangwr) 2005/09/29 <br>
	 * 
	 * @param url 发送文件的URL
	 * @param processType 处理类型（传真、邮件等）
	 * 
	 * 
	 * @param businessType 业务类型 轮渡(IF)
	 * @return 指定的文件的文件名
	 * 
	 */
	public static String FileProcess(URL url, String processType, String businessType) {

		// 用户信息取得
		String loginUser = "";

		try {
			OperatorBO operatorbo = (OperatorBO) OperatorFactory.getOperator().getOperatorBO();
			loginUser = operatorbo.getOperator_id();
		} catch (Exception e) {
			e.printStackTrace();
		}

		return priFileProcess(url, processType, businessType, null, loginUser);

	}

	/**
	 * @param url
	 * @param processType
	 * @param businessType
	 * @param ah_id
	 * @param operator_id
	 * @return String
	 */
	public static String autoFileProcess(URL url, String processType, String businessType, String ah_id, String operator_id) {
		return priFileProcess(url, processType, businessType, ah_id, operator_id);
	}

	/**
	 * 取得文件存放路径
	 * 
	 * @return 文件存放路径
	 */
	protected static String getFilePath() {
		// return "";
		return ConfigFacade.getProperty(ConfigNames.FTP_FILE_PATH);
	}

	/**
	 * DOCUMENT ME!
	 * 
	 * @param fileName DOCUMENT ME!
	 * 
	 * @return DOCUMENT ME!
	 */
	public static String getStringFromFile(String fileName) {
		StringBuffer fileContent = new StringBuffer();
		BufferedReader br = null;

		try {
			br = new BufferedReader(new FileReader(fileName));

			String line = br.readLine();

			while (line != null) {
				fileContent.append(line).append("\n");
				line = br.readLine();
			}
		} catch (FileNotFoundException e) {
			logger.error("在指定目录未找到文件");

			return "";

		} catch (IOException e) {
			logger.error("读入文件错误！", e);

			return null;
		} finally {
			if (br != null) {
				try {
					br.close();
				} catch (IOException e2) {
				}
			}
		}

		return fileContent.toString();
	}

	/**
	 * 从指定文件主读入，返回字符串
	 * 
	 * @param fileName 文件名
	 * 
	 * @param charset 编码方式 eg. "UTF-8"
	 * 
	 * @return 成功：文件内容/失败：null
	 */
	public static String getStringFromFile(String fileName, String charset) {
		StringBuffer fileContent = new StringBuffer();
		InputStreamReader is = null;
		BufferedReader br = null;

		try {
			is = new InputStreamReader(new FileInputStream(fileName), charset);
			br = new BufferedReader(is);

			String line = null;

			while ((line = br.readLine()) != null) {
				fileContent.append(line).append("\n");
			}
		} catch (FileNotFoundException e) {
			logger.error("在指定目录未找到文件", e);

			return null;
		} catch (UnsupportedEncodingException e) {
			logger.error("未识别的编码方式", e);

			return null;
		} catch (IOException e) {
			logger.error("读入文件错误！", e);

			return null;
		} finally {
			if (br != null) {
				try {
					br.close();
				} catch (IOException e2) {
				}
			}

			if (is != null) {
				try {
					is.close();
				} catch (IOException e2) {
				}
			}
		}

		return fileContent.toString();
	}

	// 2005-11-23 Delete Start
	// // 2005-09-30 add Start
	// private static int getBufferSize(char[] buffer) {
	// for (int i = 0; i < buffer.length; i++) {
	// if (buffer[i] == 0) {
	// return i;
	// // return i-1;
	// }
	// }
	//
	// return buffer.length;
	// }
	// 2005-09-30 add End
	// 2005-11-23 Delete End

	/**
	 * 把流写入文件
	 * 
	 * @param stream 输入流
	 * @param filePath 输出文件路径
	 * @param fileName 输出文件名
	 * @param isCloseISAfterWrite 写入完毕后是否关闭输入流
	 * @return boolean
	 * @throws Exception
	 */
	public static boolean createFile(InputStream stream, String filePath, String fileName, boolean isCloseISAfterWrite) throws Exception {
		boolean result = false;
		OutputStream bos = null;
		try {

			File newFile = new File(filePath, fileName);

			if (!newFile.getParentFile().exists()) {
				newFile.getParentFile().mkdirs();
				logger.debug("Path doesnot exist .create directory " + newFile.getParent());

			}
			bos = new FileOutputStream(newFile, false);// 建立一个上传文件的输出流

			logger.debug("filePath = " + filePath);
			int bytesRead = 0;
			byte[] buffer = new byte[8192];
			while ((bytesRead = stream.read(buffer, 0, 8192)) != -1) {
				bos.write(buffer, 0, bytesRead);// 将文件写入服务器
			}

			// bos.flush();

			result = true;
		} catch (Exception e) {
			logger.debug("写入文件时发生错误", e);
			throw e;
		} finally {
			if (bos != null) {
				try {
					bos.close();
				} catch (IOException e1) {
				}
			}
			if (isCloseISAfterWrite && stream != null) {
				try {
					stream.close();
				} catch (IOException e1) {
				}
			}
		}

		return result;
	}
}